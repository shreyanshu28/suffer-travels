@using Suffer_Travels.ViewModel
@model TourViewModel;
@{
    ViewData["title"] = "Manage Tour";
    Layout = "~/Views/Shared/User/_Admin.cshtml";
}

<main class="container p-3">
    <div class="nav-container" style="position:relative">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a asp-controller="User" asp-action="Home">Home</a>
            </li>
            <li class="breadcrumb-item">
                <a asp-controller="User" asp-action="Home">Tours</a>
            </li>
            <li class="breadcrumb-item active mr-auto">Manage Tours</li>
        </ol>
        <button type="button" class="btn btn-info" style="position:absolute;right:10rem;top:50%;transform:translateY(-50%);" data-bs-toggle="modal" data-bs-target="#AddTourTypeModal">Add Tour Type</button>
        <button type="button" class="btn btn-primary" style="position:absolute;right:1rem;top:50%;transform:translateY(-50%);" data-bs-toggle="modal" data-bs-target="#AddDetailsModal">Add new tour</button>
        
            <partial name="AddTourTypeDetailsPartial.cshtml" />
            <partial name="AddTourDetailsPartial.cshtml" />
    </div>
    <div class="table-responsive">
        <table class="table table-dark table-hover">
            <thead>
                <tr>
                    <th>
                        Tour Name
                    </th>
                    <th>
                        Description
                    </th>
                    <th>
                        Total Seats
                    </th>
                    <th>
                        Price
                    </th>
                    <th>
                        Number of Days
                    </th>
                    <th>
                        Tour Type
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.tourDetails)
                {
                    <tr>
                        <td>
                            @item.TourName
                        </td>
                        <td>
                            @item.Description
                        </td>
                        <td>
                            @item.TotalSeats
                        </td>
                        <td>
                            @item.Price
                        </td>
                        <td>
                            @item.NoOfDays
                        </td>
                        <td>
                            @Model.tourTypes.First(tourType => tourType.TtId == item.TourTypeId).TtName
                        </td>
                    </tr>
                }
                
            </tbody>
        </table>
    </div>
</main>

<script>
    var exampleModal = document.getElementById('AddDetailsModal')
    exampleModal.addEventListener('show.bs.modal', function (event) {
  // Button that triggered the modal
  var button = event.relatedTarget
  // Extract info from data-bs-* attributes
  //var recipient = button.getAttribute('data-bs-whatever')
  // If necessary, you could initiate an AJAX request here
  // and then do the updating in a callback.
  //
  // Update the modal's content.
  var modalTitle = exampleModal.querySelector('.modal-title')
  var modalBodyInput = exampleModal.querySelector('.modal-body input')

  modalTitle.textContent = 'New message to ' + recipient
  modalBodyInput.value = recipient
})

</script>

@section scripts { 
    @{
        <partial name="_ValidationScriptsPartial" />
    } 
}